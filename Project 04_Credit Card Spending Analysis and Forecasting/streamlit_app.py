# -*- coding: utf-8 -*-
"""streamlit_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u3JOlJIOLjIeRkDd1lrO0deMlKaxfy0l
"""

import streamlit as st
from PIL import Image
import os

# Set up page configuration
st.set_page_config(
    page_title="Credit Card Spend Analysis & Forecasting",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Title and Description
st.title("ðŸ“ˆ Credit Card Spend Analysis & Forecasting")
st.markdown("Analyze your credit card spending trends, detect anomalies, and explore insights.")

# User Input Panel
st.sidebar.header("ðŸŽ¯ User Input Panel")
customer_id = st.sidebar.selectbox("Select Customer ID", [
    '38859492057661', '2703186189652095', '630423337322', '3534093764340240',
    '375534208663984', '4767265376804500', '30074693890476'
])
category = st.sidebar.selectbox("Select Spending Category", [
    'Food', 'Entertainment', 'Travel', 'Shopping', 'Health', 'Utilities'
])
time_range = st.sidebar.slider("Select Time Range (in months)", 1, 12, 6)

# Display Selected Inputs
st.write(f"### Selected Customer ID: {customer_id}")
st.write(f"### Spending Category: {category}")
st.write(f"### Time Range: {time_range} months")

# Load and Display Graphs
graph_folder = os.path.join(os.path.dirname(__file__), 'graphs')
graphs = {
    "Boxplot of Transaction Amounts": "Boxplot of Transaction Amounts",
    "Correlation Between Spending and City Population (Log Scale)": "Correlation Between Spending and City Population (Log Scale)",
    "Customer Clusters Based on Spending Habits": "Customer Clusters Based on Spending Habits",
    "Daily Spending Trend": "Daily Spending Trend",
    "Enhanced Transaction Forecast": "enhanced_transaction_forecast",
    "Forecast Anomalies": "forecast_anomalies",
    "Monthly Spending Trend": "Monthy Spending Trend",
    "Outlier Detection in Spending Behavior": "Outlier Detection in Spending Behavior",
    "Seasonal Spending Trends by Category": "Seasonal Spending Trends by Category",
    "Spending Behavior Before vs After Payday": "Spending_Behavior_Before_vs_After_Payday",
    "Spending Behavior of High vs Low Spenders": "Spending_Behavior_of_High_vs_Low_Spenders",
    "Transaction Amount Distribution Histogram": "Transaction Amount Distribution_Histogram",
    "Transaction Clusters Based on Description": "Transaction Clusters Based on Description",
    "Weekly Spending Trend": "Weekly Spending Trend"
}

# Categorize Graphs into Tabs
st.header("ðŸ“Š Interactive Data Visualization")
tabs = st.tabs([
    "Spending Trends", "Spending Behavior Analysis", "Forecasting and Anomalies", "Customer Segmentation", "Correlation and Distribution"
])

# Display graphs with .png extension automatically added
def display_graphs(titles, tab):
    with tab:
        for title in titles:
            try:
                st.subheader(title)
                image_path = os.path.join(graph_folder, f"{graphs[title]}.png")
                image = Image.open(image_path)
                st.image(image, width=600, caption=title)  # Set fixed width for smaller display
            except FileNotFoundError:
                st.error(f"Graph '{title}' not found at {image_path}")

# Spending Trends
display_graphs([
    "Daily Spending Trend", "Monthly Spending Trend", "Weekly Spending Trend", "Seasonal Spending Trends by Category"
], tabs[0])

# Spending Behavior Analysis
display_graphs([
    "Boxplot of Transaction Amounts", "Spending Behavior Before vs After Payday",
    "Spending Behavior of High vs Low Spenders", "Outlier Detection in Spending Behavior"
], tabs[1])

# Forecasting and Anomalies
display_graphs([
    "Enhanced Transaction Forecast", "Forecast Anomalies"
], tabs[2])

# Customer Segmentation
display_graphs([
    "Customer Clusters Based on Spending Habits", "Transaction Clusters Based on Description"
], tabs[3])

# Correlation and Distribution
display_graphs([
    "Correlation Between Spending and City Population (Log Scale)", "Transaction Amount Distribution Histogram"
], tabs[4])

# Future Forecasting Section
st.header("ðŸ”® Future Forecasting â€“ Predict spending trends for the next 3-6 months")
st.markdown(f"Predicting spending trends for the next {time_range} months.")
# Placeholder for future forecasting functionality
st.info("Future forecasting functionality will be integrated here.")

# Footer
st.markdown("---")
st.markdown("Developed by Malaika Ahmed")